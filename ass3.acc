/**
 * The Duff parser: a C-parser-to-LaTeX-pretty-printer
 * by Marco Gunnink (2170248) and Bart Offereins (2255243)
*/

%prelude{
	#include <stdio.h>
	#include <stdlib.h>
	
	#include "parser.h"
}

%token AUTO, BREAK, CASE, CHAR, CONST, CONTINUE, DEFAULT, DO, 
	DOUBLE, ELSE, ENUM, EXTERN, FLOAT, FOR, GOTO, IF, INT, LONG, REGISTER, 
	RETURN, SHORT, SIGNED, SIZEOF, STATIC, STRUCT, SWITCH, TYPEDEF, UNION, 
	UNSIGNED, VOID, VOLATILE, WHILE, CONSTANT, STRING, ELLIPSIS, 
	ASSIGN, COMPARE, ARIT_OP, INC_OP, DEC_OP, PTR_OP, LOGICAL_OR, LOGICAL_AND, IDENTIFIER, SHIFT, INCLUDE, CHARACTER, FLOATCONST, INTCONST, PRINT, INPUT, EXP;

/* Rules: heavily modified, based on the official grammar as found in K&R ANSI-C second edition (Â§A13). */
translation_unit
	: ( external_declaration )*
	;
	
external_declaration
	: function_definition
	| declaration
	;
	
function_definition
	: ( declaration_specifiers )? declarator ( declaration_list )? ( ';' | compound_statement )
	;
	
declaration
	: declaration_specifiers ( init_declarator_list )? ';'
	;
	
declaration_list
	: declaration ( declaration )*
	;
	
declaration_specifiers
	: ( storage_class_specifier | type_specifier | type_qualifier )*
	;

storage_class_specifier
	: ( AUTO
	| REGISTER
	| STATIC
	| EXTERN
	| TYPEDEF )
	;

/*typedef-name replaced with 'id' */
type_specifier
	: ( VOID
	| CHAR
	| SHORT
	| INT
	| LONG
	| FLOAT
	| DOUBLE
	| SIGNED
	| UNSIGNED )
	| struct_or_union_specifier | enum_specifier
	| id<i> {}
	;
	
type_qualifier
	: ( CONST
	| VOLATILE )
	;

struct_or_union_specifier
	: struct_or_union ( id<i> )? '{' struct_declaration_list '}'
	| struct_or_union id<i> {}
	;
	
struct_or_union
	: ( STRUCT | UNION )
	;
	
struct_declaration_list
	: ( struct_declaration_list )? struct_declaration 
	;
	
init_declarator_list
	: ( init_declarator_list ',' )? init_declarator
	;
	
init_declarator
	: ( declarator '=' )? initializer
	;
	
struct_declaration
	: specifier_qualifier_list struct_declarator_list ';'
	;

specifier_qualifier_list
	: ( type_specifier | type_qualifier ) ( specifier_qualifier_list )?
	;

struct_declarator_list
	: ( struct_declarator_list ',' )? struct_declarator
	;
	
struct_declarator
	: declarator
	| ( declarator )? ':' constant_expression<ce>
	;

enum_specifier
	: ENUM ( id<i> )? '{' enumerator_list '}'
	| ENUM id<i>
	;
	
enumerator_list
	: ( enumerator_list ',' )? enumerator
	;
	
enumerator
	: id<i> ( '=' constant_expression<ce> )?
	;
	
declarator
	: ( pointer )? direct_declarator
	;
	
direct_declarator
	: id<i>
	| '(' declarator ')'
	| direct_declarator ( '[' ( expression<e> )? ']'
		| '(' parameter_type_list ')'
		| '(' ( identifier_list )? ')' )
	;
	
pointer
	: '*' ( type_qualifier_list )? ( pointer )?
	;
	
type_qualifier_list
	: ( type_qualifier_list )? type_qualifier
	;
	
parameter_type_list
	: parameter_list ( ',' ELLIPSIS )?
	;

parameter_list
	: ( parameter_list ',' )? parameter_declaration
	;
	
parameter_declaration
	: declaration_specifiers ( declarator | ( abstract_declarator )? )
	;
	
identifier_list
	: ( identifier_list ',' )? id<i>
	;
	
initializer
	: assignment_expression<ae>
	| '{' initializer_list ( ',' )? '}'
	;
	
initializer_list
	: ( initializer_list ',' )? initializer
	;
	
type_name
	: specifier_qualifier_list ( abstract_declarator )?
	;
	
abstract_declarator
	: pointer
	| ( pointer )? direct_abstract_declarator
	;
	
direct_abstract_declarator
	: '(' abstract_declarator ')'
	| ( direct_abstract_declarator )? ( '[' ( expression<e> )? ']'
		| '(' ( parameter_type_list )? ')' )
	;
	
typedef_name
	: id<i>
	;
	
statement
	: labeled_statement
	| expression_statement
	| compound_statement
	| selection_statement
	| iteration_statement
	| jump_statement
	| print_statement
	| input_statement
	;
	
labeled_statement
	: id<i> ':' statement	/* warning: labels & GOTO's make Dijkstra angry! */
	| CASE constant_expression<ce> ':' statement
	| DEFAULT ':' statement
	;
	
expression_statement
	: ( expression<e> { printExpression(e, 0); } )? ';'
	;
	
compound_statement
	: '{' ( declaration_list )? ( statement_list )? '}'
	;
	
 /* statement_or_declaration
	: statement
	| declaration
	; */
	
statement_list
	: ( statement )* statement
	;
	
selection_statement
	: IF '(' expression<e> ')' statement ( ELSE statement )?
	| SWITCH '(' expression<e> ')' statement
	;

iteration_statement
	: WHILE '(' expression<e> ')' statement
	| DO statement WHILE '(' expression<e> ')' ';'
	| FOR '(' ( expression<e> )? ';' ( expression<e> )? ';' ( expression<e> )? ')' statement
	;
	
jump_statement
	: GOTO id<i> ';' /* warning: labels & GOTO's make Dijkstra angry! */
	| CONTINUE ';'
	| BREAK ';'
	| RETURN ( expression<e> { printExpression(e, 0); } )? ';'
	;

print_statement
	: PRINT argument_expression_list<ae> ';'
	;
	
input_statement
	: INPUT ( id<i> ',' )* id<i> ';'
	;
	
expression<%out expression_pt ret>
	: assignment_expression<ae> { *ret = ae; }
	| expression<e> ',' assignment_expression<ae> { *ret = makeExpression(1, 2, ',', e, ae); }
	;

assignment_expression<%out expression_pt ret>
	: conditional_expression<ce> { *ret = ce; }
	| unary_expression<ue> assignment_operator<ao> assignment_expression<ae> { *ret = makeExpression(1, 2, ao, ue, ae); }
	;
	
assignment_operator<%out int ret>
	: ASSIGN { *ret = yylval.subtype; }
	| '=' { *ret = '='; }
	;
	
conditional_expression<%out expression_pt ret>
	: logical_OR_expression<loe> { *ret = loe; }
	| logical_OR_expression<loe> '?' expression<e> ':' conditional_expression<ce> { *ret = makeExpression(1, 3, '?', loe, e, ce); }
	;
	
constant_expression<%out expression_pt ret>
	: conditional_expression<ce> { *ret = ce; }
	;
	
logical_OR_expression<%out expression_pt ret>
	: logical_AND_expression<lae> { *ret = lae; }
	| logical_OR_expression<loe> LOGICAL_OR logical_AND_expression<lae> { *ret = makeExpression(1, 2, '||', loe, lae); }
	;
	
logical_AND_expression<%out expression_pt ret>
	: inclusive_OR_expression<ioe> { *ret = ioe; }
	| logical_AND_expression<lae> LOGICAL_AND inclusive_OR_expression<ioe> { *ret = makeExpression(1, 2, '&&', lae, ioe); }
	;

inclusive_OR_expression<%out expression_pt ret>
	: exclusive_OR_expression<eoe> { *ret = eoe; }
	| inclusive_OR_expression<ioe> '|' exclusive_OR_expression<eoe> { *ret = makeExpression(1, 2, '|', ioe, eoe); }
	;
	
exclusive_OR_expression<%out expression_pt ret>
	: AND_expression<ae> { *ret = ae; }
	| exclusive_OR_expression<eoe> '^' AND_expression<ae> { *ret = makeExpression(1, 2, '^', eoe, ae); }
	;
	
AND_expression<%out expression_pt ret>
	: equality_expression<ee> { *ret = ee; }
	| AND_expression<ae> '&' equality_expression<ee> { *ret = makeExpression(1, 2, '&', ae, ee); }
	;
	
equality_expression<%out expression_pt ret>
	: shift_expression<se> { *ret = se; }
	| equality_expression<ee> COMPARE<c> shift_expression<se> { *ret = makeExpression(1, 2, c.subtype, ee, se); }
	;

shift_expression<%out expression_pt ret>
	: additive_expression<ae> { *ret = ae; }
	| shift_expression<se> SHIFT<s> additive_expression<ae> { *ret = makeExpression(1, 2, s.subtype, se, ae); }
	;
	
additive_expression<%out expression_pt ret>
	: multiplicative_expression<me> { *ret = me; }
	| { int op = '+'; } additive_expression<ae> ( '+' | '-' { op = '-'; } ) multiplicative_expression<me> { *ret = makeExpression(1, 2, op, ae, me); }
	;
	
multiplicative_expression<%out expression_pt ret>
	: cast_expression<ce> { *ret = ce; }
	| { int op = '*'; } multiplicative_expression<me> ( '*' | '/' { op = '/'; } | '%' { op = '%'; }) cast_expression<ce> { *ret = makeExpression(1, 2, op, me, ce); }
	;
	
cast_expression<%out expression_pt ret>
	: unary_expression<ue> { *ret =  ue; }
	| '(' type_name ')' cast_expression<ce> { *ret = ce; }
	;
	
unary_expression<%out expression_pt ret>
	: postfix_expression<pe> { *ret = pe; }
	| { int t; } ( INC_OP {t = '++x';} | DEC_OP {t = '--x'; } ) unary_expression<ue> { *ret = makeExpression(1, 1, t, ue); }
	| unary_operator<op> cast_expression<ce> { *ret = makeExpression(1, 1, op, ce); }
	| SIZEOF unary_expression<ue> { *ret = ue; }
	| SIZEOF '(' type_name ')'
	;
	
unary_operator<%out int op>
	: '&' { *op = '&'; } 
	| '*' { *op = '*'; } 
	| '+' { *op = '+'; } 
	| '-' { *op = '-'; } 
	| '~' { *op = '~'; } 
	| '!' { *op = '!'; }
	;
	
postfix_expression<%out expression_pt ret>
	: primary_expression<pe> { *ret = pe; }
	| postfix_expression<pe> { *ret = makeExpression(1, 1, 0, pe); fprintf(stderr, "@ PE: "); printExpression(*ret, 0); }
		( '[' expression<e> { appendExpression(*ret, e); } ( ':' expression<e> { appendExpression(*ret, e); } )? ']' { (*ret)->operator = '[]'; }
		| '(' ( argument_expression_list<ae> { appendExpression(*ret, ae); } )? ')' { (*ret)->operator = '()'; }
		| '.' id<i> { appendExpression(*ret, makeExpression(0, 1, 0, i)); (*ret)->operator = '.'; }
		| PTR_OP id<i> { appendExpression(*ret, makeExpression(0, 1, 0, i)); (*ret)->operator = '->'; }
		| INC_OP { (*ret)->operator = 'x++'; } 
		| DEC_OP { (*ret)->operator = 'x--'; } 
		)
	;
	
primary_expression<%out expression_pt ret>
	: id<i> { *ret = makeExpression(0, 1, 0, i); }
	| constant<c> { *ret = makeExpression(0, 1, 0, c); }
	| '(' expression<e> { *ret = e; } ')'
	;
	
argument_expression_list<%out expression_pt ret>
	: { *ret = makeExpression(1, 0, '(,)'); } ( assignment_expression<ae> { appendExpression(*ret, ae); } ',' )* assignment_expression<ae2> { appendExpression(*ret, ae2); }
	;
	
constant<%out constant_pt ret>
	: INTCONST { *ret = makeIntConst(yylval.i); }
	| CHARACTER { *ret = makeIntConst(yylval.i); }
	| FLOATCONST { *ret = makeFloatConst(yylval.d); }
	| STRING { *ret = makeStringConst(yylval.s); }
	/* | id enumeration-constant..? Should check against defined enum-constants... Yeah, no */
	;
	
id<%out constant_pt ret>
	: IDENTIFIER { *ret = makeStringConst(yylval.s); (*ret)->type = IDCONST; }
	;

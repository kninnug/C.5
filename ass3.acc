/**
 * The Duff parser: a C-parser-to-LaTeX-pretty-printer
 * by Marco Gunnink (2170248) and Bart Offereins (2255243)
*/

%prelude{
	#include <stdio.h>
	#include <stdlib.h>
	
	#include "parser.h"
	
	extern FILE * out;
	
	void escapeChar(FILE * out, int c){
		switch(c){
			case '\\':
				fputs("\\textbackslash ", out);
			break;
			
			case '<':
			case '>':
				fputc('$', out);
				fputc(c, out);
				fputc('$', out);
			break;
			
			case '&':
			case '%':
			case '{':
			case '}':
			case '_':
				fputc('\\', out);
			/* fall-through: w00t! */
			default:
				fputc(c, out);
		}
	}
	
	void escapeString(FILE * out, char * s){
		while(*s) escapeChar(out, *s++);
	}
	
	void printSubtype(FILE * out, int st){
		fputs("\\ $", out);
		switch(st){
			case COMPARE_EQUAL: fputs("==", out); break;
			case COMPARE_UNEQUAL: fputs("\\neq", out); break;
			case COMPARE_LEQ: fputs("\\leq", out); break;
			case COMPARE_GREQ: fputs("\\geq", out); break;
			case COMPARE_GREATER: fputs(">", out); break;
			case COMPARE_LESS: fputs("<", out); break;
			
			case ASSIGN_AND: fputs("\\&=", out); break;
			case ASSIGN_DIVIDE: fputs("/=", out); break;
			case ASSIGN_MINUS: fputs("-=", out); break;
			case ASSIGN_MOD: fputs("\\%=", out); break;
			case ASSIGN_OR: fputs("|=", out); break;
			case ASSIGN_PLUS: fputs("+=", out); break;
			case ASSIGN_SHLEFT: fputs("<<=", out); break;
			case ASSIGN_SHRIGHT: fputs(">>=", out); break;
			case ASSIGN_XOR: fputs("\\^=", out); break;
			
			case ASSIGN_SWAP: fputs("\\leftrightarrow", out); break;
		}
		fputs("$\\ ", out);
	}
	
	/* Nice cryptic macros for shortening semantic-action blocks */
	#define PRCH escapeChar(out, yylval.c)
	#define PRCHS PRCH, fputs("\\ ", out)
	/* long live the comma-operator! */
	#define SPRCHS fputs("\\ ", out), PRCHS
	#define PRS escapeString(out, yylval.s)
	#define PRKW fprintf(out, "{\\bf %s} ", yylval.s)
	#define PRSC fputs(";\\\\\n", out)
}

%token AUTO, BREAK, CASE, CHAR, CONST, CONTINUE, DEFAULT, DO, 
	DOUBLE, ELSE, ENUM, EXTERN, FLOAT, FOR, GOTO, IF, INT, LONG, REGISTER, 
	RETURN, SHORT, SIGNED, SIZEOF, STATIC, STRUCT, SWITCH, TYPEDEF, UNION, 
	UNSIGNED, VOID, VOLATILE, WHILE, CONSTANT, STRING, ELLIPSIS, 
	ASSIGN, COMPARE, ARIT_OP, INC_OP, DEC_OP, PTR_OP, LOGICAL_OR, LOGICAL_AND, IDENTIFIER, 
	BIT_OR, BIT_AND, BIT_XOR, BIT_NOT, SHIFT, INCLUDE, CHARACTER, FLOATCONST, INTCONST, PRINT, INPUT, EXP;

/* Rules: heavily modified, based on the official grammar as found in K&R ANSI-C second edition (Â§A13). */
translation_unit
	: ( external_declaration )*
	;
	
external_declaration
	: function_definition
	| declaration
	;
	
function_definition
	: ( declaration_specifiers )? declarator ( declaration_list )? ( ';' { fputs(";\\\\\\\n", out); } | compound_statement { fputs("\\\\\n", out); } )
	;
	
declaration
	: declaration_specifiers ( init_declarator_list )? ';' { PRSC; }
	;
	
declaration_list
	: declaration ( declaration )*
	;
	
declaration_specifiers
	: ( storage_class_specifier | type_specifier | type_qualifier )* { fputc(' ', out); }
	;

storage_class_specifier
	: ( AUTO
	| REGISTER
	| STATIC
	| EXTERN
	| TYPEDEF ) { PRKW; }
	;

/*typedef-name replaced with 'id' */
type_specifier
	: ( VOID
	| CHAR
	| SHORT
	| INT
	| LONG
	| FLOAT
	| DOUBLE
	| SIGNED
	| UNSIGNED ) { PRKW; }
	| struct_or_union_specifier | enum_specifier
	| id
	;
	
type_qualifier
	: ( CONST
	| VOLATILE ) { PRKW; }
	;

struct_or_union_specifier
	: struct_or_union ( id )? '{' { fputs("\\{\\\\\n", out); } struct_declaration_list '}' { fputs("\\}\\\\\n", out); }
	| struct_or_union id
	;
	
struct_or_union
	: ( STRUCT | UNION ) { PRKW; }
	;
	
struct_declaration_list
	: ( struct_declaration_list )? struct_declaration 
	;
	
init_declarator_list
	: ( init_declarator_list ',' { PRCHS; } )? init_declarator
	;
	
init_declarator
	: ( declarator '=' { SPRCHS; } )? initializer
	;
	
struct_declaration
	: specifier_qualifier_list struct_declarator_list ';' { PRSC; }
	;

specifier_qualifier_list
	: ( type_specifier | type_qualifier ) ( specifier_qualifier_list )?
	;

struct_declarator_list
	: ( struct_declarator_list ',' { PRCHS; } )? struct_declarator
	;
	
struct_declarator
	: declarator
	| ( declarator )? ':' { PRCHS; } constant_expression
	;

enum_specifier
	: ENUM { PRKW; } ( id )? { fputs("\\{\\\\\n", out); } '{' enumerator_list '}' { fputs("\\}\\\\\n", out); }
	| ENUM { PRKW; } id
	;
	
enumerator_list
	: ( enumerator_list ',' { PRCHS; } )? enumerator
	;
	
enumerator
	: id ( '=' { SPRCHS; } constant_expression )?
	;
	
declarator
	: ( pointer )? direct_declarator
	;
	
direct_declarator
	: id
	| '(' { PRCH; } declarator ')' { PRCH; }
	| direct_declarator ( '[' { PRCH; } ( expression )? ']' { PRCH; } 
		| '(' { PRCH; } parameter_type_list ')' { PRCH; } 
		| '(' { PRCH; } ( identifier_list )? ')' { PRCH; } )
	;
	
pointer
	: '*' { PRCH; } ( type_qualifier_list )? ( pointer )?
	;
	
type_qualifier_list
	: ( type_qualifier_list )? type_qualifier
	;
	
parameter_type_list
	: parameter_list ( ',' { PRCHS; } ELLIPSIS )?
	;

parameter_list
	: ( parameter_list ',' { PRCHS; } )? parameter_declaration
	;
	
parameter_declaration
	: declaration_specifiers ( declarator | ( abstract_declarator )? )
	;
	
identifier_list
	: ( identifier_list ',' { PRCHS; } )? id
	;
	
initializer
	: assignment_expression
	| '{' { fputs("\\{", out); } initializer_list ( ',' )? '}' { fputs("\\}", out); }
	;
	
initializer_list
	: ( initializer_list ',' { PRCHS; } )? initializer
	;
	
type_name
	: specifier_qualifier_list ( abstract_declarator )?
	;
	
abstract_declarator
	: pointer
	| ( pointer )? direct_abstract_declarator
	;
	
direct_abstract_declarator
	: '(' { PRCH; } abstract_declarator ')' { PRCH; }
	| ( direct_abstract_declarator )? ( '[' { PRCH; } ( expression )? ']' { PRCH; } 
		| '(' { PRCH; } ( parameter_type_list )? ')' { PRCH; } )
	;
	
typedef_name
	: id
	;
	
statement
	: labeled_statement
	| expression_statement
	| compound_statement
	| selection_statement
	| iteration_statement
	| jump_statement
	| print_statement
	| input_statement
	;
	
labeled_statement
	: id ':' { PRCHS; } statement	/* warning: labels & GOTO's make Dijkstra angry! */
	| CASE { PRKW; } constant_expression ':' { PRCHS; } statement
	| DEFAULT { PRKW; } ':' { PRCHS; } statement
	;
	
expression_statement
	: ( expression )? ';' { PRSC; }
	;
	
compound_statement
	: '{' { fputs("\\{\\+\\\\\n", out); } ( declaration_list )? ( statement_list )? '}' { fputs("\\<\\}\\-\\\\\n", out); }
	;
	
 /* statement_or_declaration
	: statement
	| declaration
	; */
	
statement_list
	: ( statement )* statement
	;
	
selection_statement
	: IF { PRKW; } '(' { PRCH; } expression ')' { PRCH; } statement ( ELSE { PRKW; } statement )?
	| SWITCH { PRKW; } '(' { PRCH; } expression ')' { PRCH; } statement
	;

iteration_statement
	: WHILE { PRKW; } '(' { PRCH; } expression ')' { PRCH; } statement
	| DO { PRKW; } statement WHILE { PRKW; } '(' { PRCH; } expression ')' { PRCH; } ';' { PRSC; }
	| FOR { PRKW; } '(' { PRCH; } ( expression )? ';' { PRCHS; } ( expression )? ';' { PRCHS; } ( expression )? ')' { PRCH; } statement
	;
	
jump_statement
	: GOTO { PRKW; } id ';' { PRSC; } /* warning: labels & GOTO's make Dijkstra angry! */
	| CONTINUE { PRKW; } ';' { PRSC; }
	| BREAK { PRKW; } ';' { PRSC; }
	| RETURN { PRKW; } ( expression )? ';' { PRSC; }
	;

print_statement
	: PRINT { PRKW; } argument_expression_list ';' { PRSC; }
	;
	
input_statement
	: INPUT { PRKW; } ( id ',' { PRCHS; } )* id ';' { PRSC; }
	;
	
expression
	: ( expression ',' { PRCHS; } )? assignment_expression
	;

assignment_expression
	: conditional_expression
	| unary_expression assignment_operator assignment_expression
	;
	
assignment_operator
	: ASSIGN { printSubtype(out, yylval.subtype); }
	| '=' { SPRCHS; }
	;
	
conditional_expression
	: logical_OR_expression ( '?' { SPRCHS; } expression ':' { SPRCHS; } conditional_expression )?
	;
	
constant_expression
	: conditional_expression
	;
	
logical_OR_expression
	: ( logical_OR_expression LOGICAL_OR { fputs("\\ $\\vee$\\ ", out); } )? logical_AND_expression
	;
	
logical_AND_expression
	: ( logical_AND_expression LOGICAL_AND { fputs("\\ $\\wedge$\\ ", out); } )? inclusive_OR_expression
	;

inclusive_OR_expression
	: ( inclusive_OR_expression BIT_OR { SPRCHS; } )? exclusive_OR_expression
	;
	
exclusive_OR_expression
	: ( exclusive_OR_expression BIT_XOR { SPRCHS; } )? AND_expression
	;
	
AND_expression
	: (AND_expression BIT_AND { SPRCHS; } )? equality_expression
	;
	
equality_expression
	: ( equality_expression COMPARE { printSubtype(out, yylval.subtype); } )? shift_expression
	;

shift_expression
	: (shift_expression SHIFT { yylval.subtype == SHIFT_LEFT ? fputs("\\ $<<$\\ ", out) : fputs("\\ $>>$\\ ", out); } )? additive_expression
	;
	
additive_expression
	: ( additive_expression ( '+' | '-' ) { SPRCHS; } )? multiplicative_expression
	;
	
multiplicative_expression
	: ( multiplicative_expression ( '*' | '/' | '%' ) { SPRCHS; } )? cast_expression
	;
	
cast_expression
	: unary_expression
	| '(' { PRCH; } type_name ')' { PRCH; } cast_expression
	;
	
unary_expression
	: postfix_expression
	| ( INC_OP { fputs("++", out); } | DEC_OP { fputs("--", out); } ) unary_expression
	| unary_operator cast_expression
	| SIZEOF { PRKW; } unary_expression
	| SIZEOF { PRKW; } '(' { PRCH; } type_name ')' { PRCH; }
	;
	
unary_operator
	: (BIT_AND | '*' | '+' | '-' | '~' | '!' | BIT_NOT | BIT_OR | BIT_XOR) { PRCH; }
	;
	
postfix_expression
	: primary_expression
	| postfix_expression ( '[' { PRCH; } expression ( ':' { SPRCHS; } expression )? ']' { PRCH; } 
		| '(' { PRCH; } ( argument_expression_list )? ')' { PRCH; } 
		| '.' { PRCH; } id 
		| PTR_OP { fputs("$\\rightarrow$", out); } id 
		| INC_OP { fputs("++", out); } 
		| DEC_OP { fputs("--", out); } )
	;
	
primary_expression
	: id
	| constant
	| STRING { escapeString(out, yylval.s); }
	| '(' { PRCH; } expression ')' { PRCH; }
	;
	
argument_expression_list
	: ( argument_expression_list ',' { PRCHS; } )? assignment_expression
	;
	
constant
	: INTCONST { fprintf(out, "$%u$", yylval.i); }
	| CHARACTER { escapeString(out, yylval.s); }
	| FLOATCONST { fprintf(out, "$%f$", yylval.d); }
	/* | id enumeration-constant..? Should check against defined enum-constants... Yeah, no */
	;
	
id
	: IDENTIFIER { escapeString(out, yylval.s); }
	;
